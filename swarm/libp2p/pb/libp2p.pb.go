// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: libp2p.proto

package pb

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	pb "redwood.dev/blob/pb"
	pb1 "redwood.dev/swarm/protohush/pb"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type BlobMessage struct {
	// Types that are valid to be assigned to Payload:
	//	*BlobMessage_FetchManifest_
	//	*BlobMessage_SendManifest_
	//	*BlobMessage_FetchChunk_
	//	*BlobMessage_SendChunk_
	Payload isBlobMessage_Payload `protobuf_oneof:"payload"`
}

func (m *BlobMessage) Reset()      { *m = BlobMessage{} }
func (*BlobMessage) ProtoMessage() {}
func (*BlobMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_cad2813fa2bf04bd, []int{0}
}
func (m *BlobMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlobMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlobMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlobMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlobMessage.Merge(m, src)
}
func (m *BlobMessage) XXX_Size() int {
	return m.Size()
}
func (m *BlobMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_BlobMessage.DiscardUnknown(m)
}

var xxx_messageInfo_BlobMessage proto.InternalMessageInfo

type isBlobMessage_Payload interface {
	isBlobMessage_Payload()
	Equal(interface{}) bool
	VerboseEqual(interface{}) error
	MarshalTo([]byte) (int, error)
	Size() int
}

type BlobMessage_FetchManifest_ struct {
	FetchManifest *BlobMessage_FetchManifest `protobuf:"bytes,1,opt,name=fetchManifest,proto3,oneof" json:"fetchManifest,omitempty"`
}
type BlobMessage_SendManifest_ struct {
	SendManifest *BlobMessage_SendManifest `protobuf:"bytes,2,opt,name=sendManifest,proto3,oneof" json:"sendManifest,omitempty"`
}
type BlobMessage_FetchChunk_ struct {
	FetchChunk *BlobMessage_FetchChunk `protobuf:"bytes,3,opt,name=fetchChunk,proto3,oneof" json:"fetchChunk,omitempty"`
}
type BlobMessage_SendChunk_ struct {
	SendChunk *BlobMessage_SendChunk `protobuf:"bytes,4,opt,name=sendChunk,proto3,oneof" json:"sendChunk,omitempty"`
}

func (*BlobMessage_FetchManifest_) isBlobMessage_Payload() {}
func (*BlobMessage_SendManifest_) isBlobMessage_Payload()  {}
func (*BlobMessage_FetchChunk_) isBlobMessage_Payload()    {}
func (*BlobMessage_SendChunk_) isBlobMessage_Payload()     {}

func (m *BlobMessage) GetPayload() isBlobMessage_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *BlobMessage) GetFetchManifest() *BlobMessage_FetchManifest {
	if x, ok := m.GetPayload().(*BlobMessage_FetchManifest_); ok {
		return x.FetchManifest
	}
	return nil
}

func (m *BlobMessage) GetSendManifest() *BlobMessage_SendManifest {
	if x, ok := m.GetPayload().(*BlobMessage_SendManifest_); ok {
		return x.SendManifest
	}
	return nil
}

func (m *BlobMessage) GetFetchChunk() *BlobMessage_FetchChunk {
	if x, ok := m.GetPayload().(*BlobMessage_FetchChunk_); ok {
		return x.FetchChunk
	}
	return nil
}

func (m *BlobMessage) GetSendChunk() *BlobMessage_SendChunk {
	if x, ok := m.GetPayload().(*BlobMessage_SendChunk_); ok {
		return x.SendChunk
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*BlobMessage) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*BlobMessage_FetchManifest_)(nil),
		(*BlobMessage_SendManifest_)(nil),
		(*BlobMessage_FetchChunk_)(nil),
		(*BlobMessage_SendChunk_)(nil),
	}
}

type BlobMessage_FetchManifest struct {
	Id *pb.BlobID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *BlobMessage_FetchManifest) Reset()      { *m = BlobMessage_FetchManifest{} }
func (*BlobMessage_FetchManifest) ProtoMessage() {}
func (*BlobMessage_FetchManifest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cad2813fa2bf04bd, []int{0, 0}
}
func (m *BlobMessage_FetchManifest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlobMessage_FetchManifest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlobMessage_FetchManifest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlobMessage_FetchManifest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlobMessage_FetchManifest.Merge(m, src)
}
func (m *BlobMessage_FetchManifest) XXX_Size() int {
	return m.Size()
}
func (m *BlobMessage_FetchManifest) XXX_DiscardUnknown() {
	xxx_messageInfo_BlobMessage_FetchManifest.DiscardUnknown(m)
}

var xxx_messageInfo_BlobMessage_FetchManifest proto.InternalMessageInfo

func (m *BlobMessage_FetchManifest) GetId() *pb.BlobID {
	if m != nil {
		return m.Id
	}
	return nil
}

type BlobMessage_SendManifest struct {
	Manifest *pb.Manifest `protobuf:"bytes,1,opt,name=manifest,proto3" json:"manifest,omitempty"`
	Exists   bool         `protobuf:"varint,2,opt,name=exists,proto3" json:"exists,omitempty"`
}

func (m *BlobMessage_SendManifest) Reset()      { *m = BlobMessage_SendManifest{} }
func (*BlobMessage_SendManifest) ProtoMessage() {}
func (*BlobMessage_SendManifest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cad2813fa2bf04bd, []int{0, 1}
}
func (m *BlobMessage_SendManifest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlobMessage_SendManifest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlobMessage_SendManifest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlobMessage_SendManifest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlobMessage_SendManifest.Merge(m, src)
}
func (m *BlobMessage_SendManifest) XXX_Size() int {
	return m.Size()
}
func (m *BlobMessage_SendManifest) XXX_DiscardUnknown() {
	xxx_messageInfo_BlobMessage_SendManifest.DiscardUnknown(m)
}

var xxx_messageInfo_BlobMessage_SendManifest proto.InternalMessageInfo

func (m *BlobMessage_SendManifest) GetManifest() *pb.Manifest {
	if m != nil {
		return m.Manifest
	}
	return nil
}

func (m *BlobMessage_SendManifest) GetExists() bool {
	if m != nil {
		return m.Exists
	}
	return false
}

type BlobMessage_FetchChunk struct {
	Sha3 []byte `protobuf:"bytes,1,opt,name=sha3,proto3" json:"sha3,omitempty"`
}

func (m *BlobMessage_FetchChunk) Reset()      { *m = BlobMessage_FetchChunk{} }
func (*BlobMessage_FetchChunk) ProtoMessage() {}
func (*BlobMessage_FetchChunk) Descriptor() ([]byte, []int) {
	return fileDescriptor_cad2813fa2bf04bd, []int{0, 2}
}
func (m *BlobMessage_FetchChunk) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlobMessage_FetchChunk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlobMessage_FetchChunk.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlobMessage_FetchChunk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlobMessage_FetchChunk.Merge(m, src)
}
func (m *BlobMessage_FetchChunk) XXX_Size() int {
	return m.Size()
}
func (m *BlobMessage_FetchChunk) XXX_DiscardUnknown() {
	xxx_messageInfo_BlobMessage_FetchChunk.DiscardUnknown(m)
}

var xxx_messageInfo_BlobMessage_FetchChunk proto.InternalMessageInfo

func (m *BlobMessage_FetchChunk) GetSha3() []byte {
	if m != nil {
		return m.Sha3
	}
	return nil
}

type BlobMessage_SendChunk struct {
	Chunk  []byte `protobuf:"bytes,1,opt,name=chunk,proto3" json:"chunk,omitempty"`
	Exists bool   `protobuf:"varint,2,opt,name=exists,proto3" json:"exists,omitempty"`
}

func (m *BlobMessage_SendChunk) Reset()      { *m = BlobMessage_SendChunk{} }
func (*BlobMessage_SendChunk) ProtoMessage() {}
func (*BlobMessage_SendChunk) Descriptor() ([]byte, []int) {
	return fileDescriptor_cad2813fa2bf04bd, []int{0, 3}
}
func (m *BlobMessage_SendChunk) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlobMessage_SendChunk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlobMessage_SendChunk.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlobMessage_SendChunk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlobMessage_SendChunk.Merge(m, src)
}
func (m *BlobMessage_SendChunk) XXX_Size() int {
	return m.Size()
}
func (m *BlobMessage_SendChunk) XXX_DiscardUnknown() {
	xxx_messageInfo_BlobMessage_SendChunk.DiscardUnknown(m)
}

var xxx_messageInfo_BlobMessage_SendChunk proto.InternalMessageInfo

func (m *BlobMessage_SendChunk) GetChunk() []byte {
	if m != nil {
		return m.Chunk
	}
	return nil
}

func (m *BlobMessage_SendChunk) GetExists() bool {
	if m != nil {
		return m.Exists
	}
	return false
}

type HushMessage struct {
	// Types that are valid to be assigned to Payload:
	//	*HushMessage_DhPubkeyAttestations
	//	*HushMessage_ProposeIndividualSession_
	//	*HushMessage_ApproveIndividualSession_
	//	*HushMessage_SendIndividualMessage_
	//	*HushMessage_SendGroupMessage_
	Payload isHushMessage_Payload `protobuf_oneof:"payload"`
}

func (m *HushMessage) Reset()      { *m = HushMessage{} }
func (*HushMessage) ProtoMessage() {}
func (*HushMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_cad2813fa2bf04bd, []int{1}
}
func (m *HushMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HushMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HushMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HushMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HushMessage.Merge(m, src)
}
func (m *HushMessage) XXX_Size() int {
	return m.Size()
}
func (m *HushMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_HushMessage.DiscardUnknown(m)
}

var xxx_messageInfo_HushMessage proto.InternalMessageInfo

type isHushMessage_Payload interface {
	isHushMessage_Payload()
	Equal(interface{}) bool
	VerboseEqual(interface{}) error
	MarshalTo([]byte) (int, error)
	Size() int
}

type HushMessage_DhPubkeyAttestations struct {
	DhPubkeyAttestations *HushMessage_DHPubkeyAttestations `protobuf:"bytes,1,opt,name=dhPubkeyAttestations,proto3,oneof" json:"dhPubkeyAttestations,omitempty"`
}
type HushMessage_ProposeIndividualSession_ struct {
	ProposeIndividualSession *HushMessage_ProposeIndividualSession `protobuf:"bytes,2,opt,name=proposeIndividualSession,proto3,oneof" json:"proposeIndividualSession,omitempty"`
}
type HushMessage_ApproveIndividualSession_ struct {
	ApproveIndividualSession *HushMessage_ApproveIndividualSession `protobuf:"bytes,3,opt,name=approveIndividualSession,proto3,oneof" json:"approveIndividualSession,omitempty"`
}
type HushMessage_SendIndividualMessage_ struct {
	SendIndividualMessage *HushMessage_SendIndividualMessage `protobuf:"bytes,4,opt,name=sendIndividualMessage,proto3,oneof" json:"sendIndividualMessage,omitempty"`
}
type HushMessage_SendGroupMessage_ struct {
	SendGroupMessage *HushMessage_SendGroupMessage `protobuf:"bytes,5,opt,name=sendGroupMessage,proto3,oneof" json:"sendGroupMessage,omitempty"`
}

func (*HushMessage_DhPubkeyAttestations) isHushMessage_Payload()      {}
func (*HushMessage_ProposeIndividualSession_) isHushMessage_Payload() {}
func (*HushMessage_ApproveIndividualSession_) isHushMessage_Payload() {}
func (*HushMessage_SendIndividualMessage_) isHushMessage_Payload()    {}
func (*HushMessage_SendGroupMessage_) isHushMessage_Payload()         {}

func (m *HushMessage) GetPayload() isHushMessage_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *HushMessage) GetDhPubkeyAttestations() *HushMessage_DHPubkeyAttestations {
	if x, ok := m.GetPayload().(*HushMessage_DhPubkeyAttestations); ok {
		return x.DhPubkeyAttestations
	}
	return nil
}

func (m *HushMessage) GetProposeIndividualSession() *HushMessage_ProposeIndividualSession {
	if x, ok := m.GetPayload().(*HushMessage_ProposeIndividualSession_); ok {
		return x.ProposeIndividualSession
	}
	return nil
}

func (m *HushMessage) GetApproveIndividualSession() *HushMessage_ApproveIndividualSession {
	if x, ok := m.GetPayload().(*HushMessage_ApproveIndividualSession_); ok {
		return x.ApproveIndividualSession
	}
	return nil
}

func (m *HushMessage) GetSendIndividualMessage() *HushMessage_SendIndividualMessage {
	if x, ok := m.GetPayload().(*HushMessage_SendIndividualMessage_); ok {
		return x.SendIndividualMessage
	}
	return nil
}

func (m *HushMessage) GetSendGroupMessage() *HushMessage_SendGroupMessage {
	if x, ok := m.GetPayload().(*HushMessage_SendGroupMessage_); ok {
		return x.SendGroupMessage
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*HushMessage) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*HushMessage_DhPubkeyAttestations)(nil),
		(*HushMessage_ProposeIndividualSession_)(nil),
		(*HushMessage_ApproveIndividualSession_)(nil),
		(*HushMessage_SendIndividualMessage_)(nil),
		(*HushMessage_SendGroupMessage_)(nil),
	}
}

type HushMessage_DHPubkeyAttestations struct {
	Attestations []pb1.DHPubkeyAttestation `protobuf:"bytes,1,rep,name=attestations,proto3" json:"attestations"`
}

func (m *HushMessage_DHPubkeyAttestations) Reset()      { *m = HushMessage_DHPubkeyAttestations{} }
func (*HushMessage_DHPubkeyAttestations) ProtoMessage() {}
func (*HushMessage_DHPubkeyAttestations) Descriptor() ([]byte, []int) {
	return fileDescriptor_cad2813fa2bf04bd, []int{1, 0}
}
func (m *HushMessage_DHPubkeyAttestations) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HushMessage_DHPubkeyAttestations) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HushMessage_DHPubkeyAttestations.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HushMessage_DHPubkeyAttestations) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HushMessage_DHPubkeyAttestations.Merge(m, src)
}
func (m *HushMessage_DHPubkeyAttestations) XXX_Size() int {
	return m.Size()
}
func (m *HushMessage_DHPubkeyAttestations) XXX_DiscardUnknown() {
	xxx_messageInfo_HushMessage_DHPubkeyAttestations.DiscardUnknown(m)
}

var xxx_messageInfo_HushMessage_DHPubkeyAttestations proto.InternalMessageInfo

func (m *HushMessage_DHPubkeyAttestations) GetAttestations() []pb1.DHPubkeyAttestation {
	if m != nil {
		return m.Attestations
	}
	return nil
}

type HushMessage_ProposeIndividualSession struct {
	EncryptedProposal []byte `protobuf:"bytes,1,opt,name=encryptedProposal,proto3" json:"encryptedProposal,omitempty"`
}

func (m *HushMessage_ProposeIndividualSession) Reset()      { *m = HushMessage_ProposeIndividualSession{} }
func (*HushMessage_ProposeIndividualSession) ProtoMessage() {}
func (*HushMessage_ProposeIndividualSession) Descriptor() ([]byte, []int) {
	return fileDescriptor_cad2813fa2bf04bd, []int{1, 1}
}
func (m *HushMessage_ProposeIndividualSession) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HushMessage_ProposeIndividualSession) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HushMessage_ProposeIndividualSession.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HushMessage_ProposeIndividualSession) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HushMessage_ProposeIndividualSession.Merge(m, src)
}
func (m *HushMessage_ProposeIndividualSession) XXX_Size() int {
	return m.Size()
}
func (m *HushMessage_ProposeIndividualSession) XXX_DiscardUnknown() {
	xxx_messageInfo_HushMessage_ProposeIndividualSession.DiscardUnknown(m)
}

var xxx_messageInfo_HushMessage_ProposeIndividualSession proto.InternalMessageInfo

func (m *HushMessage_ProposeIndividualSession) GetEncryptedProposal() []byte {
	if m != nil {
		return m.EncryptedProposal
	}
	return nil
}

type HushMessage_ApproveIndividualSession struct {
	Approval *pb1.IndividualSessionApproval `protobuf:"bytes,1,opt,name=approval,proto3" json:"approval,omitempty"`
}

func (m *HushMessage_ApproveIndividualSession) Reset()      { *m = HushMessage_ApproveIndividualSession{} }
func (*HushMessage_ApproveIndividualSession) ProtoMessage() {}
func (*HushMessage_ApproveIndividualSession) Descriptor() ([]byte, []int) {
	return fileDescriptor_cad2813fa2bf04bd, []int{1, 2}
}
func (m *HushMessage_ApproveIndividualSession) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HushMessage_ApproveIndividualSession) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HushMessage_ApproveIndividualSession.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HushMessage_ApproveIndividualSession) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HushMessage_ApproveIndividualSession.Merge(m, src)
}
func (m *HushMessage_ApproveIndividualSession) XXX_Size() int {
	return m.Size()
}
func (m *HushMessage_ApproveIndividualSession) XXX_DiscardUnknown() {
	xxx_messageInfo_HushMessage_ApproveIndividualSession.DiscardUnknown(m)
}

var xxx_messageInfo_HushMessage_ApproveIndividualSession proto.InternalMessageInfo

func (m *HushMessage_ApproveIndividualSession) GetApproval() *pb1.IndividualSessionApproval {
	if m != nil {
		return m.Approval
	}
	return nil
}

type HushMessage_SendIndividualMessage struct {
	Message *pb1.IndividualMessage `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *HushMessage_SendIndividualMessage) Reset()      { *m = HushMessage_SendIndividualMessage{} }
func (*HushMessage_SendIndividualMessage) ProtoMessage() {}
func (*HushMessage_SendIndividualMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_cad2813fa2bf04bd, []int{1, 3}
}
func (m *HushMessage_SendIndividualMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HushMessage_SendIndividualMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HushMessage_SendIndividualMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HushMessage_SendIndividualMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HushMessage_SendIndividualMessage.Merge(m, src)
}
func (m *HushMessage_SendIndividualMessage) XXX_Size() int {
	return m.Size()
}
func (m *HushMessage_SendIndividualMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_HushMessage_SendIndividualMessage.DiscardUnknown(m)
}

var xxx_messageInfo_HushMessage_SendIndividualMessage proto.InternalMessageInfo

func (m *HushMessage_SendIndividualMessage) GetMessage() *pb1.IndividualMessage {
	if m != nil {
		return m.Message
	}
	return nil
}

type HushMessage_SendGroupMessage struct {
	Message *pb1.GroupMessage `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *HushMessage_SendGroupMessage) Reset()      { *m = HushMessage_SendGroupMessage{} }
func (*HushMessage_SendGroupMessage) ProtoMessage() {}
func (*HushMessage_SendGroupMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_cad2813fa2bf04bd, []int{1, 4}
}
func (m *HushMessage_SendGroupMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HushMessage_SendGroupMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HushMessage_SendGroupMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HushMessage_SendGroupMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HushMessage_SendGroupMessage.Merge(m, src)
}
func (m *HushMessage_SendGroupMessage) XXX_Size() int {
	return m.Size()
}
func (m *HushMessage_SendGroupMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_HushMessage_SendGroupMessage.DiscardUnknown(m)
}

var xxx_messageInfo_HushMessage_SendGroupMessage proto.InternalMessageInfo

func (m *HushMessage_SendGroupMessage) GetMessage() *pb1.GroupMessage {
	if m != nil {
		return m.Message
	}
	return nil
}

func init() {
	proto.RegisterType((*BlobMessage)(nil), "Redwood.swarm.libp2p.BlobMessage")
	proto.RegisterType((*BlobMessage_FetchManifest)(nil), "Redwood.swarm.libp2p.BlobMessage.FetchManifest")
	proto.RegisterType((*BlobMessage_SendManifest)(nil), "Redwood.swarm.libp2p.BlobMessage.SendManifest")
	proto.RegisterType((*BlobMessage_FetchChunk)(nil), "Redwood.swarm.libp2p.BlobMessage.FetchChunk")
	proto.RegisterType((*BlobMessage_SendChunk)(nil), "Redwood.swarm.libp2p.BlobMessage.SendChunk")
	proto.RegisterType((*HushMessage)(nil), "Redwood.swarm.libp2p.HushMessage")
	proto.RegisterType((*HushMessage_DHPubkeyAttestations)(nil), "Redwood.swarm.libp2p.HushMessage.DHPubkeyAttestations")
	proto.RegisterType((*HushMessage_ProposeIndividualSession)(nil), "Redwood.swarm.libp2p.HushMessage.ProposeIndividualSession")
	proto.RegisterType((*HushMessage_ApproveIndividualSession)(nil), "Redwood.swarm.libp2p.HushMessage.ApproveIndividualSession")
	proto.RegisterType((*HushMessage_SendIndividualMessage)(nil), "Redwood.swarm.libp2p.HushMessage.SendIndividualMessage")
	proto.RegisterType((*HushMessage_SendGroupMessage)(nil), "Redwood.swarm.libp2p.HushMessage.SendGroupMessage")
}

func init() { proto.RegisterFile("libp2p.proto", fileDescriptor_cad2813fa2bf04bd) }

var fileDescriptor_cad2813fa2bf04bd = []byte{
	// 714 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x95, 0x4f, 0x6f, 0xd3, 0x4c,
	0x10, 0xc6, 0xd7, 0x6d, 0xda, 0xa6, 0xd3, 0x54, 0xea, 0xbb, 0x4a, 0xab, 0xc8, 0xaf, 0x58, 0xaa,
	0x0a, 0x24, 0x04, 0xc5, 0x91, 0x52, 0x01, 0x82, 0x0b, 0x6a, 0xa8, 0xc0, 0x15, 0x6a, 0x55, 0x6d,
	0x10, 0x48, 0x95, 0x90, 0xb0, 0xe3, 0x6d, 0x6c, 0x9a, 0x78, 0xad, 0xac, 0xdd, 0x3f, 0x37, 0x3e,
	0x02, 0xdf, 0x02, 0x3e, 0x02, 0x47, 0x8e, 0x3d, 0xf6, 0xc0, 0xa1, 0x27, 0xd4, 0xb8, 0x17, 0x8e,
	0x3d, 0x72, 0x44, 0x5e, 0x3b, 0x89, 0xd3, 0xd8, 0x6a, 0x4e, 0xf6, 0x66, 0xf6, 0xf9, 0x3d, 0xb3,
	0x33, 0xe3, 0x0d, 0x94, 0xda, 0x8e, 0xe9, 0xd5, 0x3c, 0xcd, 0xeb, 0x72, 0x9f, 0xe3, 0x32, 0x65,
	0xd6, 0x31, 0xe7, 0x96, 0x26, 0x8e, 0x8d, 0x6e, 0x47, 0x8b, 0x63, 0xea, 0xe3, 0x96, 0xe3, 0xdb,
	0x81, 0xa9, 0x35, 0x79, 0xa7, 0xda, 0xe2, 0x2d, 0x5e, 0x95, 0x9b, 0xcd, 0xe0, 0x40, 0xae, 0xe4,
	0x42, 0xbe, 0xc5, 0x10, 0x15, 0x9b, 0x6d, 0x6e, 0x56, 0x3d, 0xb3, 0x1a, 0x3d, 0x93, 0xdf, 0xee,
	0x48, 0x60, 0x2c, 0xb4, 0x03, 0x61, 0x47, 0xe1, 0xe8, 0x19, 0x87, 0xd7, 0x7e, 0x15, 0x60, 0xa1,
	0xde, 0xe6, 0xe6, 0x0e, 0x13, 0xc2, 0x68, 0x31, 0xfc, 0x01, 0x16, 0x0f, 0x98, 0xdf, 0xb4, 0x77,
	0x0c, 0xd7, 0x39, 0x60, 0xc2, 0xaf, 0x28, 0xab, 0xca, 0x83, 0x85, 0x5a, 0x55, 0xcb, 0xca, 0x4f,
	0x4b, 0x29, 0xb5, 0xd7, 0x69, 0x99, 0x8e, 0xe8, 0x28, 0x07, 0xbf, 0x83, 0x92, 0x60, 0xae, 0x35,
	0xe0, 0x4e, 0x49, 0xae, 0x76, 0x3b, 0xb7, 0x91, 0x52, 0xe9, 0x88, 0x8e, 0x50, 0xf0, 0x2e, 0x80,
	0xb4, 0x79, 0x65, 0x07, 0xee, 0x61, 0x65, 0x5a, 0x32, 0xd7, 0x27, 0xcc, 0x55, 0x6a, 0x74, 0x44,
	0x53, 0x04, 0xfc, 0x16, 0xe6, 0x23, 0x7e, 0x8c, 0x2b, 0x48, 0xdc, 0xa3, 0xc9, 0x52, 0xec, 0xd3,
	0x86, 0x7a, 0xf5, 0x09, 0x2c, 0x8e, 0x14, 0x05, 0xdf, 0x83, 0x29, 0xc7, 0x4a, 0x2a, 0x5a, 0x1e,
	0x60, 0x65, 0xb3, 0x22, 0xdc, 0xf6, 0x16, 0x9d, 0x72, 0x2c, 0x75, 0x1f, 0x4a, 0xe9, 0x33, 0xe3,
	0x1a, 0x14, 0x3b, 0xa3, 0xdd, 0x58, 0x19, 0xd5, 0xf6, 0x77, 0xd2, 0xc1, 0x3e, 0xbc, 0x02, 0xb3,
	0xec, 0xc4, 0x11, 0xbe, 0x90, 0x75, 0x2e, 0xd2, 0x64, 0xa5, 0xae, 0x02, 0x0c, 0xcf, 0x8e, 0x31,
	0x14, 0x84, 0x6d, 0x6c, 0x48, 0x6a, 0x89, 0xca, 0x77, 0xf5, 0x39, 0xcc, 0x0f, 0x8e, 0x83, 0xcb,
	0x30, 0xd3, 0x94, 0xa5, 0x88, 0x77, 0xc4, 0x8b, 0x3c, 0x78, 0x7d, 0x1e, 0xe6, 0x3c, 0xe3, 0xb4,
	0xcd, 0x0d, 0x6b, 0xed, 0x5b, 0x11, 0x16, 0xf4, 0x40, 0xd8, 0xfd, 0xb1, 0x6a, 0x43, 0xd9, 0xb2,
	0xf7, 0x02, 0xf3, 0x90, 0x9d, 0x6e, 0xfa, 0x3e, 0x13, 0xbe, 0xe1, 0x3b, 0xdc, 0x15, 0xc9, 0x79,
	0x9e, 0x66, 0x97, 0x38, 0x05, 0xd0, 0xb6, 0xf4, 0x71, 0xb5, 0x8e, 0x68, 0x26, 0x15, 0x9f, 0x40,
	0xc5, 0xeb, 0x72, 0x8f, 0x0b, 0xb6, 0xed, 0x5a, 0xce, 0x91, 0x63, 0x05, 0x46, 0xbb, 0xc1, 0x84,
	0x70, 0xb8, 0x9b, 0xcc, 0xdd, 0x8b, 0xdb, 0x1d, 0xf7, 0x72, 0x08, 0x3a, 0xa2, 0xb9, 0xf4, 0xc8,
	0xd9, 0xf0, 0xbc, 0x2e, 0x3f, 0xca, 0x70, 0x9e, 0x9e, 0xd4, 0x79, 0x33, 0x87, 0x10, 0x39, 0xe7,
	0xd1, 0x31, 0x87, 0xe5, 0x68, 0xf2, 0x86, 0x81, 0x84, 0x96, 0x4c, 0xf1, 0xb3, 0xdb, 0x6d, 0x1b,
	0x59, 0x72, 0x1d, 0xd1, 0x6c, 0x2e, 0xfe, 0x04, 0x4b, 0x51, 0xe0, 0x4d, 0x97, 0x07, 0x5e, 0xdf,
	0x6b, 0x46, 0x7a, 0xd5, 0x26, 0xf3, 0x4a, 0x2b, 0x75, 0x44, 0xc7, 0x68, 0xaa, 0x0b, 0xe5, 0xac,
	0xb6, 0xe3, 0xf7, 0x50, 0x32, 0x46, 0x87, 0x68, 0x3a, 0xe3, 0xb3, 0x1f, 0xdc, 0x78, 0x59, 0xb3,
	0x53, 0x2f, 0x9c, 0xfd, 0xbe, 0x8b, 0xe8, 0x08, 0x47, 0xd5, 0xa1, 0x92, 0xd7, 0x74, 0xbc, 0x0e,
	0xff, 0x31, 0xb7, 0xd9, 0x3d, 0xf5, 0x7c, 0x66, 0xc5, 0x9b, 0x8c, 0x76, 0xf2, 0x55, 0x8c, 0x07,
	0xd4, 0xcf, 0x50, 0xc9, 0x6b, 0x22, 0xde, 0x85, 0x62, 0xdc, 0xc4, 0x04, 0x30, 0x5e, 0xaf, 0x61,
	0xe6, 0x63, 0xea, 0xcd, 0x44, 0x49, 0x07, 0x0c, 0xf5, 0x23, 0x2c, 0x67, 0x76, 0x0e, 0x6f, 0xc1,
	0x5c, 0x27, 0xe9, 0x4b, 0xec, 0xf3, 0x70, 0x02, 0x9f, 0x44, 0x4c, 0xfb, 0x52, 0xb5, 0x01, 0x4b,
	0x37, 0x9b, 0x85, 0x5f, 0xde, 0x24, 0xdf, 0xcf, 0x25, 0xa7, 0x75, 0x03, 0x68, 0xea, 0xa6, 0xa8,
	0x1b, 0xe7, 0x3d, 0x82, 0x2e, 0x7a, 0x04, 0x5d, 0xf6, 0x88, 0x72, 0xdd, 0x23, 0xca, 0xdf, 0x1e,
	0x51, 0xbe, 0x84, 0x44, 0xf9, 0x1e, 0x12, 0xe5, 0x47, 0x48, 0x94, 0x9f, 0x21, 0x51, 0xce, 0x42,
	0xa2, 0x9c, 0x87, 0x44, 0xb9, 0x0c, 0x89, 0xf2, 0x27, 0x24, 0xe8, 0x3a, 0x24, 0xca, 0xd7, 0x2b,
	0x82, 0xce, 0xaf, 0x08, 0xba, 0xb8, 0x22, 0x68, 0xff, 0xff, 0x6e, 0xe2, 0x6f, 0xb1, 0xa3, 0x6a,
	0xfc, 0x8f, 0x17, 0x4f, 0x5d, 0xd5, 0x33, 0xcd, 0x59, 0x99, 0xce, 0xc6, 0xbf, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x70, 0x84, 0xda, 0x68, 0x72, 0x07, 0x00, 0x00,
}

func (this *BlobMessage) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*BlobMessage)
	if !ok {
		that2, ok := that.(BlobMessage)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *BlobMessage")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *BlobMessage but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *BlobMessage but is not nil && this == nil")
	}
	if that1.Payload == nil {
		if this.Payload != nil {
			return fmt.Errorf("this.Payload != nil && that1.Payload == nil")
		}
	} else if this.Payload == nil {
		return fmt.Errorf("this.Payload == nil && that1.Payload != nil")
	} else if err := this.Payload.VerboseEqual(that1.Payload); err != nil {
		return err
	}
	return nil
}
func (this *BlobMessage_FetchManifest_) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*BlobMessage_FetchManifest_)
	if !ok {
		that2, ok := that.(BlobMessage_FetchManifest_)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *BlobMessage_FetchManifest_")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *BlobMessage_FetchManifest_ but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *BlobMessage_FetchManifest_ but is not nil && this == nil")
	}
	if !this.FetchManifest.Equal(that1.FetchManifest) {
		return fmt.Errorf("FetchManifest this(%v) Not Equal that(%v)", this.FetchManifest, that1.FetchManifest)
	}
	return nil
}
func (this *BlobMessage_SendManifest_) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*BlobMessage_SendManifest_)
	if !ok {
		that2, ok := that.(BlobMessage_SendManifest_)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *BlobMessage_SendManifest_")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *BlobMessage_SendManifest_ but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *BlobMessage_SendManifest_ but is not nil && this == nil")
	}
	if !this.SendManifest.Equal(that1.SendManifest) {
		return fmt.Errorf("SendManifest this(%v) Not Equal that(%v)", this.SendManifest, that1.SendManifest)
	}
	return nil
}
func (this *BlobMessage_FetchChunk_) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*BlobMessage_FetchChunk_)
	if !ok {
		that2, ok := that.(BlobMessage_FetchChunk_)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *BlobMessage_FetchChunk_")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *BlobMessage_FetchChunk_ but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *BlobMessage_FetchChunk_ but is not nil && this == nil")
	}
	if !this.FetchChunk.Equal(that1.FetchChunk) {
		return fmt.Errorf("FetchChunk this(%v) Not Equal that(%v)", this.FetchChunk, that1.FetchChunk)
	}
	return nil
}
func (this *BlobMessage_SendChunk_) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*BlobMessage_SendChunk_)
	if !ok {
		that2, ok := that.(BlobMessage_SendChunk_)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *BlobMessage_SendChunk_")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *BlobMessage_SendChunk_ but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *BlobMessage_SendChunk_ but is not nil && this == nil")
	}
	if !this.SendChunk.Equal(that1.SendChunk) {
		return fmt.Errorf("SendChunk this(%v) Not Equal that(%v)", this.SendChunk, that1.SendChunk)
	}
	return nil
}
func (this *BlobMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BlobMessage)
	if !ok {
		that2, ok := that.(BlobMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Payload == nil {
		if this.Payload != nil {
			return false
		}
	} else if this.Payload == nil {
		return false
	} else if !this.Payload.Equal(that1.Payload) {
		return false
	}
	return true
}
func (this *BlobMessage_FetchManifest_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BlobMessage_FetchManifest_)
	if !ok {
		that2, ok := that.(BlobMessage_FetchManifest_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.FetchManifest.Equal(that1.FetchManifest) {
		return false
	}
	return true
}
func (this *BlobMessage_SendManifest_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BlobMessage_SendManifest_)
	if !ok {
		that2, ok := that.(BlobMessage_SendManifest_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SendManifest.Equal(that1.SendManifest) {
		return false
	}
	return true
}
func (this *BlobMessage_FetchChunk_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BlobMessage_FetchChunk_)
	if !ok {
		that2, ok := that.(BlobMessage_FetchChunk_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.FetchChunk.Equal(that1.FetchChunk) {
		return false
	}
	return true
}
func (this *BlobMessage_SendChunk_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BlobMessage_SendChunk_)
	if !ok {
		that2, ok := that.(BlobMessage_SendChunk_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SendChunk.Equal(that1.SendChunk) {
		return false
	}
	return true
}
func (this *BlobMessage_FetchManifest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*BlobMessage_FetchManifest)
	if !ok {
		that2, ok := that.(BlobMessage_FetchManifest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *BlobMessage_FetchManifest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *BlobMessage_FetchManifest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *BlobMessage_FetchManifest but is not nil && this == nil")
	}
	if !this.Id.Equal(that1.Id) {
		return fmt.Errorf("Id this(%v) Not Equal that(%v)", this.Id, that1.Id)
	}
	return nil
}
func (this *BlobMessage_FetchManifest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BlobMessage_FetchManifest)
	if !ok {
		that2, ok := that.(BlobMessage_FetchManifest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Id.Equal(that1.Id) {
		return false
	}
	return true
}
func (this *BlobMessage_SendManifest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*BlobMessage_SendManifest)
	if !ok {
		that2, ok := that.(BlobMessage_SendManifest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *BlobMessage_SendManifest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *BlobMessage_SendManifest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *BlobMessage_SendManifest but is not nil && this == nil")
	}
	if !this.Manifest.Equal(that1.Manifest) {
		return fmt.Errorf("Manifest this(%v) Not Equal that(%v)", this.Manifest, that1.Manifest)
	}
	if this.Exists != that1.Exists {
		return fmt.Errorf("Exists this(%v) Not Equal that(%v)", this.Exists, that1.Exists)
	}
	return nil
}
func (this *BlobMessage_SendManifest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BlobMessage_SendManifest)
	if !ok {
		that2, ok := that.(BlobMessage_SendManifest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Manifest.Equal(that1.Manifest) {
		return false
	}
	if this.Exists != that1.Exists {
		return false
	}
	return true
}
func (this *BlobMessage_FetchChunk) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*BlobMessage_FetchChunk)
	if !ok {
		that2, ok := that.(BlobMessage_FetchChunk)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *BlobMessage_FetchChunk")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *BlobMessage_FetchChunk but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *BlobMessage_FetchChunk but is not nil && this == nil")
	}
	if !bytes.Equal(this.Sha3, that1.Sha3) {
		return fmt.Errorf("Sha3 this(%v) Not Equal that(%v)", this.Sha3, that1.Sha3)
	}
	return nil
}
func (this *BlobMessage_FetchChunk) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BlobMessage_FetchChunk)
	if !ok {
		that2, ok := that.(BlobMessage_FetchChunk)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Sha3, that1.Sha3) {
		return false
	}
	return true
}
func (this *BlobMessage_SendChunk) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*BlobMessage_SendChunk)
	if !ok {
		that2, ok := that.(BlobMessage_SendChunk)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *BlobMessage_SendChunk")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *BlobMessage_SendChunk but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *BlobMessage_SendChunk but is not nil && this == nil")
	}
	if !bytes.Equal(this.Chunk, that1.Chunk) {
		return fmt.Errorf("Chunk this(%v) Not Equal that(%v)", this.Chunk, that1.Chunk)
	}
	if this.Exists != that1.Exists {
		return fmt.Errorf("Exists this(%v) Not Equal that(%v)", this.Exists, that1.Exists)
	}
	return nil
}
func (this *BlobMessage_SendChunk) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BlobMessage_SendChunk)
	if !ok {
		that2, ok := that.(BlobMessage_SendChunk)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Chunk, that1.Chunk) {
		return false
	}
	if this.Exists != that1.Exists {
		return false
	}
	return true
}
func (this *HushMessage) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*HushMessage)
	if !ok {
		that2, ok := that.(HushMessage)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *HushMessage")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *HushMessage but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *HushMessage but is not nil && this == nil")
	}
	if that1.Payload == nil {
		if this.Payload != nil {
			return fmt.Errorf("this.Payload != nil && that1.Payload == nil")
		}
	} else if this.Payload == nil {
		return fmt.Errorf("this.Payload == nil && that1.Payload != nil")
	} else if err := this.Payload.VerboseEqual(that1.Payload); err != nil {
		return err
	}
	return nil
}
func (this *HushMessage_DhPubkeyAttestations) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*HushMessage_DhPubkeyAttestations)
	if !ok {
		that2, ok := that.(HushMessage_DhPubkeyAttestations)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *HushMessage_DhPubkeyAttestations")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *HushMessage_DhPubkeyAttestations but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *HushMessage_DhPubkeyAttestations but is not nil && this == nil")
	}
	if !this.DhPubkeyAttestations.Equal(that1.DhPubkeyAttestations) {
		return fmt.Errorf("DhPubkeyAttestations this(%v) Not Equal that(%v)", this.DhPubkeyAttestations, that1.DhPubkeyAttestations)
	}
	return nil
}
func (this *HushMessage_ProposeIndividualSession_) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*HushMessage_ProposeIndividualSession_)
	if !ok {
		that2, ok := that.(HushMessage_ProposeIndividualSession_)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *HushMessage_ProposeIndividualSession_")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *HushMessage_ProposeIndividualSession_ but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *HushMessage_ProposeIndividualSession_ but is not nil && this == nil")
	}
	if !this.ProposeIndividualSession.Equal(that1.ProposeIndividualSession) {
		return fmt.Errorf("ProposeIndividualSession this(%v) Not Equal that(%v)", this.ProposeIndividualSession, that1.ProposeIndividualSession)
	}
	return nil
}
func (this *HushMessage_ApproveIndividualSession_) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*HushMessage_ApproveIndividualSession_)
	if !ok {
		that2, ok := that.(HushMessage_ApproveIndividualSession_)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *HushMessage_ApproveIndividualSession_")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *HushMessage_ApproveIndividualSession_ but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *HushMessage_ApproveIndividualSession_ but is not nil && this == nil")
	}
	if !this.ApproveIndividualSession.Equal(that1.ApproveIndividualSession) {
		return fmt.Errorf("ApproveIndividualSession this(%v) Not Equal that(%v)", this.ApproveIndividualSession, that1.ApproveIndividualSession)
	}
	return nil
}
func (this *HushMessage_SendIndividualMessage_) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*HushMessage_SendIndividualMessage_)
	if !ok {
		that2, ok := that.(HushMessage_SendIndividualMessage_)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *HushMessage_SendIndividualMessage_")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *HushMessage_SendIndividualMessage_ but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *HushMessage_SendIndividualMessage_ but is not nil && this == nil")
	}
	if !this.SendIndividualMessage.Equal(that1.SendIndividualMessage) {
		return fmt.Errorf("SendIndividualMessage this(%v) Not Equal that(%v)", this.SendIndividualMessage, that1.SendIndividualMessage)
	}
	return nil
}
func (this *HushMessage_SendGroupMessage_) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*HushMessage_SendGroupMessage_)
	if !ok {
		that2, ok := that.(HushMessage_SendGroupMessage_)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *HushMessage_SendGroupMessage_")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *HushMessage_SendGroupMessage_ but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *HushMessage_SendGroupMessage_ but is not nil && this == nil")
	}
	if !this.SendGroupMessage.Equal(that1.SendGroupMessage) {
		return fmt.Errorf("SendGroupMessage this(%v) Not Equal that(%v)", this.SendGroupMessage, that1.SendGroupMessage)
	}
	return nil
}
func (this *HushMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HushMessage)
	if !ok {
		that2, ok := that.(HushMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Payload == nil {
		if this.Payload != nil {
			return false
		}
	} else if this.Payload == nil {
		return false
	} else if !this.Payload.Equal(that1.Payload) {
		return false
	}
	return true
}
func (this *HushMessage_DhPubkeyAttestations) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HushMessage_DhPubkeyAttestations)
	if !ok {
		that2, ok := that.(HushMessage_DhPubkeyAttestations)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DhPubkeyAttestations.Equal(that1.DhPubkeyAttestations) {
		return false
	}
	return true
}
func (this *HushMessage_ProposeIndividualSession_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HushMessage_ProposeIndividualSession_)
	if !ok {
		that2, ok := that.(HushMessage_ProposeIndividualSession_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ProposeIndividualSession.Equal(that1.ProposeIndividualSession) {
		return false
	}
	return true
}
func (this *HushMessage_ApproveIndividualSession_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HushMessage_ApproveIndividualSession_)
	if !ok {
		that2, ok := that.(HushMessage_ApproveIndividualSession_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApproveIndividualSession.Equal(that1.ApproveIndividualSession) {
		return false
	}
	return true
}
func (this *HushMessage_SendIndividualMessage_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HushMessage_SendIndividualMessage_)
	if !ok {
		that2, ok := that.(HushMessage_SendIndividualMessage_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SendIndividualMessage.Equal(that1.SendIndividualMessage) {
		return false
	}
	return true
}
func (this *HushMessage_SendGroupMessage_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HushMessage_SendGroupMessage_)
	if !ok {
		that2, ok := that.(HushMessage_SendGroupMessage_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SendGroupMessage.Equal(that1.SendGroupMessage) {
		return false
	}
	return true
}
func (this *HushMessage_DHPubkeyAttestations) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*HushMessage_DHPubkeyAttestations)
	if !ok {
		that2, ok := that.(HushMessage_DHPubkeyAttestations)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *HushMessage_DHPubkeyAttestations")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *HushMessage_DHPubkeyAttestations but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *HushMessage_DHPubkeyAttestations but is not nil && this == nil")
	}
	if len(this.Attestations) != len(that1.Attestations) {
		return fmt.Errorf("Attestations this(%v) Not Equal that(%v)", len(this.Attestations), len(that1.Attestations))
	}
	for i := range this.Attestations {
		if !this.Attestations[i].Equal(&that1.Attestations[i]) {
			return fmt.Errorf("Attestations this[%v](%v) Not Equal that[%v](%v)", i, this.Attestations[i], i, that1.Attestations[i])
		}
	}
	return nil
}
func (this *HushMessage_DHPubkeyAttestations) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HushMessage_DHPubkeyAttestations)
	if !ok {
		that2, ok := that.(HushMessage_DHPubkeyAttestations)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Attestations) != len(that1.Attestations) {
		return false
	}
	for i := range this.Attestations {
		if !this.Attestations[i].Equal(&that1.Attestations[i]) {
			return false
		}
	}
	return true
}
func (this *HushMessage_ProposeIndividualSession) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*HushMessage_ProposeIndividualSession)
	if !ok {
		that2, ok := that.(HushMessage_ProposeIndividualSession)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *HushMessage_ProposeIndividualSession")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *HushMessage_ProposeIndividualSession but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *HushMessage_ProposeIndividualSession but is not nil && this == nil")
	}
	if !bytes.Equal(this.EncryptedProposal, that1.EncryptedProposal) {
		return fmt.Errorf("EncryptedProposal this(%v) Not Equal that(%v)", this.EncryptedProposal, that1.EncryptedProposal)
	}
	return nil
}
func (this *HushMessage_ProposeIndividualSession) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HushMessage_ProposeIndividualSession)
	if !ok {
		that2, ok := that.(HushMessage_ProposeIndividualSession)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.EncryptedProposal, that1.EncryptedProposal) {
		return false
	}
	return true
}
func (this *HushMessage_ApproveIndividualSession) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*HushMessage_ApproveIndividualSession)
	if !ok {
		that2, ok := that.(HushMessage_ApproveIndividualSession)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *HushMessage_ApproveIndividualSession")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *HushMessage_ApproveIndividualSession but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *HushMessage_ApproveIndividualSession but is not nil && this == nil")
	}
	if !this.Approval.Equal(that1.Approval) {
		return fmt.Errorf("Approval this(%v) Not Equal that(%v)", this.Approval, that1.Approval)
	}
	return nil
}
func (this *HushMessage_ApproveIndividualSession) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HushMessage_ApproveIndividualSession)
	if !ok {
		that2, ok := that.(HushMessage_ApproveIndividualSession)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Approval.Equal(that1.Approval) {
		return false
	}
	return true
}
func (this *HushMessage_SendIndividualMessage) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*HushMessage_SendIndividualMessage)
	if !ok {
		that2, ok := that.(HushMessage_SendIndividualMessage)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *HushMessage_SendIndividualMessage")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *HushMessage_SendIndividualMessage but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *HushMessage_SendIndividualMessage but is not nil && this == nil")
	}
	if !this.Message.Equal(that1.Message) {
		return fmt.Errorf("Message this(%v) Not Equal that(%v)", this.Message, that1.Message)
	}
	return nil
}
func (this *HushMessage_SendIndividualMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HushMessage_SendIndividualMessage)
	if !ok {
		that2, ok := that.(HushMessage_SendIndividualMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Message.Equal(that1.Message) {
		return false
	}
	return true
}
func (this *HushMessage_SendGroupMessage) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*HushMessage_SendGroupMessage)
	if !ok {
		that2, ok := that.(HushMessage_SendGroupMessage)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *HushMessage_SendGroupMessage")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *HushMessage_SendGroupMessage but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *HushMessage_SendGroupMessage but is not nil && this == nil")
	}
	if !this.Message.Equal(that1.Message) {
		return fmt.Errorf("Message this(%v) Not Equal that(%v)", this.Message, that1.Message)
	}
	return nil
}
func (this *HushMessage_SendGroupMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HushMessage_SendGroupMessage)
	if !ok {
		that2, ok := that.(HushMessage_SendGroupMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Message.Equal(that1.Message) {
		return false
	}
	return true
}
func (this *BlobMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.BlobMessage{")
	if this.Payload != nil {
		s = append(s, "Payload: "+fmt.Sprintf("%#v", this.Payload)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BlobMessage_FetchManifest_) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&pb.BlobMessage_FetchManifest_{` +
		`FetchManifest:` + fmt.Sprintf("%#v", this.FetchManifest) + `}`}, ", ")
	return s
}
func (this *BlobMessage_SendManifest_) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&pb.BlobMessage_SendManifest_{` +
		`SendManifest:` + fmt.Sprintf("%#v", this.SendManifest) + `}`}, ", ")
	return s
}
func (this *BlobMessage_FetchChunk_) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&pb.BlobMessage_FetchChunk_{` +
		`FetchChunk:` + fmt.Sprintf("%#v", this.FetchChunk) + `}`}, ", ")
	return s
}
func (this *BlobMessage_SendChunk_) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&pb.BlobMessage_SendChunk_{` +
		`SendChunk:` + fmt.Sprintf("%#v", this.SendChunk) + `}`}, ", ")
	return s
}
func (this *BlobMessage_FetchManifest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.BlobMessage_FetchManifest{")
	if this.Id != nil {
		s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BlobMessage_SendManifest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.BlobMessage_SendManifest{")
	if this.Manifest != nil {
		s = append(s, "Manifest: "+fmt.Sprintf("%#v", this.Manifest)+",\n")
	}
	s = append(s, "Exists: "+fmt.Sprintf("%#v", this.Exists)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BlobMessage_FetchChunk) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.BlobMessage_FetchChunk{")
	s = append(s, "Sha3: "+fmt.Sprintf("%#v", this.Sha3)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BlobMessage_SendChunk) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.BlobMessage_SendChunk{")
	s = append(s, "Chunk: "+fmt.Sprintf("%#v", this.Chunk)+",\n")
	s = append(s, "Exists: "+fmt.Sprintf("%#v", this.Exists)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HushMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&pb.HushMessage{")
	if this.Payload != nil {
		s = append(s, "Payload: "+fmt.Sprintf("%#v", this.Payload)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HushMessage_DhPubkeyAttestations) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&pb.HushMessage_DhPubkeyAttestations{` +
		`DhPubkeyAttestations:` + fmt.Sprintf("%#v", this.DhPubkeyAttestations) + `}`}, ", ")
	return s
}
func (this *HushMessage_ProposeIndividualSession_) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&pb.HushMessage_ProposeIndividualSession_{` +
		`ProposeIndividualSession:` + fmt.Sprintf("%#v", this.ProposeIndividualSession) + `}`}, ", ")
	return s
}
func (this *HushMessage_ApproveIndividualSession_) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&pb.HushMessage_ApproveIndividualSession_{` +
		`ApproveIndividualSession:` + fmt.Sprintf("%#v", this.ApproveIndividualSession) + `}`}, ", ")
	return s
}
func (this *HushMessage_SendIndividualMessage_) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&pb.HushMessage_SendIndividualMessage_{` +
		`SendIndividualMessage:` + fmt.Sprintf("%#v", this.SendIndividualMessage) + `}`}, ", ")
	return s
}
func (this *HushMessage_SendGroupMessage_) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&pb.HushMessage_SendGroupMessage_{` +
		`SendGroupMessage:` + fmt.Sprintf("%#v", this.SendGroupMessage) + `}`}, ", ")
	return s
}
func (this *HushMessage_DHPubkeyAttestations) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.HushMessage_DHPubkeyAttestations{")
	if this.Attestations != nil {
		vs := make([]pb1.DHPubkeyAttestation, len(this.Attestations))
		for i := range vs {
			vs[i] = this.Attestations[i]
		}
		s = append(s, "Attestations: "+fmt.Sprintf("%#v", vs)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HushMessage_ProposeIndividualSession) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.HushMessage_ProposeIndividualSession{")
	s = append(s, "EncryptedProposal: "+fmt.Sprintf("%#v", this.EncryptedProposal)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HushMessage_ApproveIndividualSession) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.HushMessage_ApproveIndividualSession{")
	if this.Approval != nil {
		s = append(s, "Approval: "+fmt.Sprintf("%#v", this.Approval)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HushMessage_SendIndividualMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.HushMessage_SendIndividualMessage{")
	if this.Message != nil {
		s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HushMessage_SendGroupMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.HushMessage_SendGroupMessage{")
	if this.Message != nil {
		s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringLibp2P(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *BlobMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlobMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlobMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Payload != nil {
		{
			size := m.Payload.Size()
			i -= size
			if _, err := m.Payload.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *BlobMessage_FetchManifest_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlobMessage_FetchManifest_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.FetchManifest != nil {
		{
			size, err := m.FetchManifest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLibp2P(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *BlobMessage_SendManifest_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlobMessage_SendManifest_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SendManifest != nil {
		{
			size, err := m.SendManifest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLibp2P(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *BlobMessage_FetchChunk_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlobMessage_FetchChunk_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.FetchChunk != nil {
		{
			size, err := m.FetchChunk.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLibp2P(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *BlobMessage_SendChunk_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlobMessage_SendChunk_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SendChunk != nil {
		{
			size, err := m.SendChunk.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLibp2P(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *BlobMessage_FetchManifest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlobMessage_FetchManifest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlobMessage_FetchManifest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		{
			size, err := m.Id.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLibp2P(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BlobMessage_SendManifest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlobMessage_SendManifest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlobMessage_SendManifest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Exists {
		i--
		if m.Exists {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Manifest != nil {
		{
			size, err := m.Manifest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLibp2P(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BlobMessage_FetchChunk) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlobMessage_FetchChunk) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlobMessage_FetchChunk) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sha3) > 0 {
		i -= len(m.Sha3)
		copy(dAtA[i:], m.Sha3)
		i = encodeVarintLibp2P(dAtA, i, uint64(len(m.Sha3)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BlobMessage_SendChunk) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlobMessage_SendChunk) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlobMessage_SendChunk) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Exists {
		i--
		if m.Exists {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Chunk) > 0 {
		i -= len(m.Chunk)
		copy(dAtA[i:], m.Chunk)
		i = encodeVarintLibp2P(dAtA, i, uint64(len(m.Chunk)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HushMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HushMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HushMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Payload != nil {
		{
			size := m.Payload.Size()
			i -= size
			if _, err := m.Payload.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *HushMessage_DhPubkeyAttestations) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HushMessage_DhPubkeyAttestations) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DhPubkeyAttestations != nil {
		{
			size, err := m.DhPubkeyAttestations.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLibp2P(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *HushMessage_ProposeIndividualSession_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HushMessage_ProposeIndividualSession_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ProposeIndividualSession != nil {
		{
			size, err := m.ProposeIndividualSession.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLibp2P(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *HushMessage_ApproveIndividualSession_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HushMessage_ApproveIndividualSession_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ApproveIndividualSession != nil {
		{
			size, err := m.ApproveIndividualSession.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLibp2P(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *HushMessage_SendIndividualMessage_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HushMessage_SendIndividualMessage_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SendIndividualMessage != nil {
		{
			size, err := m.SendIndividualMessage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLibp2P(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *HushMessage_SendGroupMessage_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HushMessage_SendGroupMessage_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SendGroupMessage != nil {
		{
			size, err := m.SendGroupMessage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLibp2P(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *HushMessage_DHPubkeyAttestations) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HushMessage_DHPubkeyAttestations) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HushMessage_DHPubkeyAttestations) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Attestations) > 0 {
		for iNdEx := len(m.Attestations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Attestations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLibp2P(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *HushMessage_ProposeIndividualSession) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HushMessage_ProposeIndividualSession) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HushMessage_ProposeIndividualSession) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EncryptedProposal) > 0 {
		i -= len(m.EncryptedProposal)
		copy(dAtA[i:], m.EncryptedProposal)
		i = encodeVarintLibp2P(dAtA, i, uint64(len(m.EncryptedProposal)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HushMessage_ApproveIndividualSession) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HushMessage_ApproveIndividualSession) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HushMessage_ApproveIndividualSession) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Approval != nil {
		{
			size, err := m.Approval.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLibp2P(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HushMessage_SendIndividualMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HushMessage_SendIndividualMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HushMessage_SendIndividualMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Message != nil {
		{
			size, err := m.Message.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLibp2P(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HushMessage_SendGroupMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HushMessage_SendGroupMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HushMessage_SendGroupMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Message != nil {
		{
			size, err := m.Message.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLibp2P(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintLibp2P(dAtA []byte, offset int, v uint64) int {
	offset -= sovLibp2P(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedBlobMessage(r randyLibp2P, easy bool) *BlobMessage {
	this := &BlobMessage{}
	oneofNumber_Payload := []int32{1, 2, 3, 4}[r.Intn(4)]
	switch oneofNumber_Payload {
	case 1:
		this.Payload = NewPopulatedBlobMessage_FetchManifest_(r, easy)
	case 2:
		this.Payload = NewPopulatedBlobMessage_SendManifest_(r, easy)
	case 3:
		this.Payload = NewPopulatedBlobMessage_FetchChunk_(r, easy)
	case 4:
		this.Payload = NewPopulatedBlobMessage_SendChunk_(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedBlobMessage_FetchManifest_(r randyLibp2P, easy bool) *BlobMessage_FetchManifest_ {
	this := &BlobMessage_FetchManifest_{}
	this.FetchManifest = NewPopulatedBlobMessage_FetchManifest(r, easy)
	return this
}
func NewPopulatedBlobMessage_SendManifest_(r randyLibp2P, easy bool) *BlobMessage_SendManifest_ {
	this := &BlobMessage_SendManifest_{}
	this.SendManifest = NewPopulatedBlobMessage_SendManifest(r, easy)
	return this
}
func NewPopulatedBlobMessage_FetchChunk_(r randyLibp2P, easy bool) *BlobMessage_FetchChunk_ {
	this := &BlobMessage_FetchChunk_{}
	this.FetchChunk = NewPopulatedBlobMessage_FetchChunk(r, easy)
	return this
}
func NewPopulatedBlobMessage_SendChunk_(r randyLibp2P, easy bool) *BlobMessage_SendChunk_ {
	this := &BlobMessage_SendChunk_{}
	this.SendChunk = NewPopulatedBlobMessage_SendChunk(r, easy)
	return this
}
func NewPopulatedBlobMessage_FetchManifest(r randyLibp2P, easy bool) *BlobMessage_FetchManifest {
	this := &BlobMessage_FetchManifest{}
	if r.Intn(5) != 0 {
		this.Id = pb.NewPopulatedBlobID(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedBlobMessage_SendManifest(r randyLibp2P, easy bool) *BlobMessage_SendManifest {
	this := &BlobMessage_SendManifest{}
	if r.Intn(5) != 0 {
		this.Manifest = pb.NewPopulatedManifest(r, easy)
	}
	this.Exists = bool(bool(r.Intn(2) == 0))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedBlobMessage_FetchChunk(r randyLibp2P, easy bool) *BlobMessage_FetchChunk {
	this := &BlobMessage_FetchChunk{}
	v1 := r.Intn(100)
	this.Sha3 = make([]byte, v1)
	for i := 0; i < v1; i++ {
		this.Sha3[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedBlobMessage_SendChunk(r randyLibp2P, easy bool) *BlobMessage_SendChunk {
	this := &BlobMessage_SendChunk{}
	v2 := r.Intn(100)
	this.Chunk = make([]byte, v2)
	for i := 0; i < v2; i++ {
		this.Chunk[i] = byte(r.Intn(256))
	}
	this.Exists = bool(bool(r.Intn(2) == 0))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedHushMessage(r randyLibp2P, easy bool) *HushMessage {
	this := &HushMessage{}
	oneofNumber_Payload := []int32{1, 2, 3, 4, 5}[r.Intn(5)]
	switch oneofNumber_Payload {
	case 1:
		this.Payload = NewPopulatedHushMessage_DhPubkeyAttestations(r, easy)
	case 2:
		this.Payload = NewPopulatedHushMessage_ProposeIndividualSession_(r, easy)
	case 3:
		this.Payload = NewPopulatedHushMessage_ApproveIndividualSession_(r, easy)
	case 4:
		this.Payload = NewPopulatedHushMessage_SendIndividualMessage_(r, easy)
	case 5:
		this.Payload = NewPopulatedHushMessage_SendGroupMessage_(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedHushMessage_DhPubkeyAttestations(r randyLibp2P, easy bool) *HushMessage_DhPubkeyAttestations {
	this := &HushMessage_DhPubkeyAttestations{}
	this.DhPubkeyAttestations = NewPopulatedHushMessage_DHPubkeyAttestations(r, easy)
	return this
}
func NewPopulatedHushMessage_ProposeIndividualSession_(r randyLibp2P, easy bool) *HushMessage_ProposeIndividualSession_ {
	this := &HushMessage_ProposeIndividualSession_{}
	this.ProposeIndividualSession = NewPopulatedHushMessage_ProposeIndividualSession(r, easy)
	return this
}
func NewPopulatedHushMessage_ApproveIndividualSession_(r randyLibp2P, easy bool) *HushMessage_ApproveIndividualSession_ {
	this := &HushMessage_ApproveIndividualSession_{}
	this.ApproveIndividualSession = NewPopulatedHushMessage_ApproveIndividualSession(r, easy)
	return this
}
func NewPopulatedHushMessage_SendIndividualMessage_(r randyLibp2P, easy bool) *HushMessage_SendIndividualMessage_ {
	this := &HushMessage_SendIndividualMessage_{}
	this.SendIndividualMessage = NewPopulatedHushMessage_SendIndividualMessage(r, easy)
	return this
}
func NewPopulatedHushMessage_SendGroupMessage_(r randyLibp2P, easy bool) *HushMessage_SendGroupMessage_ {
	this := &HushMessage_SendGroupMessage_{}
	this.SendGroupMessage = NewPopulatedHushMessage_SendGroupMessage(r, easy)
	return this
}
func NewPopulatedHushMessage_DHPubkeyAttestations(r randyLibp2P, easy bool) *HushMessage_DHPubkeyAttestations {
	this := &HushMessage_DHPubkeyAttestations{}
	if r.Intn(5) != 0 {
		v3 := r.Intn(5)
		this.Attestations = make([]pb1.DHPubkeyAttestation, v3)
		for i := 0; i < v3; i++ {
			v4 := pb1.NewPopulatedDHPubkeyAttestation(r, easy)
			this.Attestations[i] = *v4
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedHushMessage_ProposeIndividualSession(r randyLibp2P, easy bool) *HushMessage_ProposeIndividualSession {
	this := &HushMessage_ProposeIndividualSession{}
	v5 := r.Intn(100)
	this.EncryptedProposal = make([]byte, v5)
	for i := 0; i < v5; i++ {
		this.EncryptedProposal[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedHushMessage_ApproveIndividualSession(r randyLibp2P, easy bool) *HushMessage_ApproveIndividualSession {
	this := &HushMessage_ApproveIndividualSession{}
	if r.Intn(5) != 0 {
		this.Approval = pb1.NewPopulatedIndividualSessionApproval(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedHushMessage_SendIndividualMessage(r randyLibp2P, easy bool) *HushMessage_SendIndividualMessage {
	this := &HushMessage_SendIndividualMessage{}
	if r.Intn(5) != 0 {
		this.Message = pb1.NewPopulatedIndividualMessage(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedHushMessage_SendGroupMessage(r randyLibp2P, easy bool) *HushMessage_SendGroupMessage {
	this := &HushMessage_SendGroupMessage{}
	if r.Intn(5) != 0 {
		this.Message = pb1.NewPopulatedGroupMessage(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyLibp2P interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneLibp2P(r randyLibp2P) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringLibp2P(r randyLibp2P) string {
	v6 := r.Intn(100)
	tmps := make([]rune, v6)
	for i := 0; i < v6; i++ {
		tmps[i] = randUTF8RuneLibp2P(r)
	}
	return string(tmps)
}
func randUnrecognizedLibp2P(r randyLibp2P, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldLibp2P(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldLibp2P(dAtA []byte, r randyLibp2P, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateLibp2P(dAtA, uint64(key))
		v7 := r.Int63()
		if r.Intn(2) == 0 {
			v7 *= -1
		}
		dAtA = encodeVarintPopulateLibp2P(dAtA, uint64(v7))
	case 1:
		dAtA = encodeVarintPopulateLibp2P(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateLibp2P(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateLibp2P(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateLibp2P(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateLibp2P(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *BlobMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Payload != nil {
		n += m.Payload.Size()
	}
	return n
}

func (m *BlobMessage_FetchManifest_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FetchManifest != nil {
		l = m.FetchManifest.Size()
		n += 1 + l + sovLibp2P(uint64(l))
	}
	return n
}
func (m *BlobMessage_SendManifest_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SendManifest != nil {
		l = m.SendManifest.Size()
		n += 1 + l + sovLibp2P(uint64(l))
	}
	return n
}
func (m *BlobMessage_FetchChunk_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FetchChunk != nil {
		l = m.FetchChunk.Size()
		n += 1 + l + sovLibp2P(uint64(l))
	}
	return n
}
func (m *BlobMessage_SendChunk_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SendChunk != nil {
		l = m.SendChunk.Size()
		n += 1 + l + sovLibp2P(uint64(l))
	}
	return n
}
func (m *BlobMessage_FetchManifest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = m.Id.Size()
		n += 1 + l + sovLibp2P(uint64(l))
	}
	return n
}

func (m *BlobMessage_SendManifest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Manifest != nil {
		l = m.Manifest.Size()
		n += 1 + l + sovLibp2P(uint64(l))
	}
	if m.Exists {
		n += 2
	}
	return n
}

func (m *BlobMessage_FetchChunk) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sha3)
	if l > 0 {
		n += 1 + l + sovLibp2P(uint64(l))
	}
	return n
}

func (m *BlobMessage_SendChunk) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Chunk)
	if l > 0 {
		n += 1 + l + sovLibp2P(uint64(l))
	}
	if m.Exists {
		n += 2
	}
	return n
}

func (m *HushMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Payload != nil {
		n += m.Payload.Size()
	}
	return n
}

func (m *HushMessage_DhPubkeyAttestations) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DhPubkeyAttestations != nil {
		l = m.DhPubkeyAttestations.Size()
		n += 1 + l + sovLibp2P(uint64(l))
	}
	return n
}
func (m *HushMessage_ProposeIndividualSession_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProposeIndividualSession != nil {
		l = m.ProposeIndividualSession.Size()
		n += 1 + l + sovLibp2P(uint64(l))
	}
	return n
}
func (m *HushMessage_ApproveIndividualSession_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApproveIndividualSession != nil {
		l = m.ApproveIndividualSession.Size()
		n += 1 + l + sovLibp2P(uint64(l))
	}
	return n
}
func (m *HushMessage_SendIndividualMessage_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SendIndividualMessage != nil {
		l = m.SendIndividualMessage.Size()
		n += 1 + l + sovLibp2P(uint64(l))
	}
	return n
}
func (m *HushMessage_SendGroupMessage_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SendGroupMessage != nil {
		l = m.SendGroupMessage.Size()
		n += 1 + l + sovLibp2P(uint64(l))
	}
	return n
}
func (m *HushMessage_DHPubkeyAttestations) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Attestations) > 0 {
		for _, e := range m.Attestations {
			l = e.Size()
			n += 1 + l + sovLibp2P(uint64(l))
		}
	}
	return n
}

func (m *HushMessage_ProposeIndividualSession) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.EncryptedProposal)
	if l > 0 {
		n += 1 + l + sovLibp2P(uint64(l))
	}
	return n
}

func (m *HushMessage_ApproveIndividualSession) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Approval != nil {
		l = m.Approval.Size()
		n += 1 + l + sovLibp2P(uint64(l))
	}
	return n
}

func (m *HushMessage_SendIndividualMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Message != nil {
		l = m.Message.Size()
		n += 1 + l + sovLibp2P(uint64(l))
	}
	return n
}

func (m *HushMessage_SendGroupMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Message != nil {
		l = m.Message.Size()
		n += 1 + l + sovLibp2P(uint64(l))
	}
	return n
}

func sovLibp2P(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLibp2P(x uint64) (n int) {
	return sovLibp2P(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *BlobMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BlobMessage{`,
		`Payload:` + fmt.Sprintf("%v", this.Payload) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BlobMessage_FetchManifest_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BlobMessage_FetchManifest_{`,
		`FetchManifest:` + strings.Replace(fmt.Sprintf("%v", this.FetchManifest), "BlobMessage_FetchManifest", "BlobMessage_FetchManifest", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BlobMessage_SendManifest_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BlobMessage_SendManifest_{`,
		`SendManifest:` + strings.Replace(fmt.Sprintf("%v", this.SendManifest), "BlobMessage_SendManifest", "BlobMessage_SendManifest", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BlobMessage_FetchChunk_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BlobMessage_FetchChunk_{`,
		`FetchChunk:` + strings.Replace(fmt.Sprintf("%v", this.FetchChunk), "BlobMessage_FetchChunk", "BlobMessage_FetchChunk", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BlobMessage_SendChunk_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BlobMessage_SendChunk_{`,
		`SendChunk:` + strings.Replace(fmt.Sprintf("%v", this.SendChunk), "BlobMessage_SendChunk", "BlobMessage_SendChunk", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BlobMessage_FetchManifest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BlobMessage_FetchManifest{`,
		`Id:` + strings.Replace(fmt.Sprintf("%v", this.Id), "BlobID", "pb.BlobID", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BlobMessage_SendManifest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BlobMessage_SendManifest{`,
		`Manifest:` + strings.Replace(fmt.Sprintf("%v", this.Manifest), "Manifest", "pb.Manifest", 1) + `,`,
		`Exists:` + fmt.Sprintf("%v", this.Exists) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BlobMessage_FetchChunk) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BlobMessage_FetchChunk{`,
		`Sha3:` + fmt.Sprintf("%v", this.Sha3) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BlobMessage_SendChunk) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BlobMessage_SendChunk{`,
		`Chunk:` + fmt.Sprintf("%v", this.Chunk) + `,`,
		`Exists:` + fmt.Sprintf("%v", this.Exists) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HushMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HushMessage{`,
		`Payload:` + fmt.Sprintf("%v", this.Payload) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HushMessage_DhPubkeyAttestations) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HushMessage_DhPubkeyAttestations{`,
		`DhPubkeyAttestations:` + strings.Replace(fmt.Sprintf("%v", this.DhPubkeyAttestations), "HushMessage_DHPubkeyAttestations", "HushMessage_DHPubkeyAttestations", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HushMessage_ProposeIndividualSession_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HushMessage_ProposeIndividualSession_{`,
		`ProposeIndividualSession:` + strings.Replace(fmt.Sprintf("%v", this.ProposeIndividualSession), "HushMessage_ProposeIndividualSession", "HushMessage_ProposeIndividualSession", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HushMessage_ApproveIndividualSession_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HushMessage_ApproveIndividualSession_{`,
		`ApproveIndividualSession:` + strings.Replace(fmt.Sprintf("%v", this.ApproveIndividualSession), "HushMessage_ApproveIndividualSession", "HushMessage_ApproveIndividualSession", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HushMessage_SendIndividualMessage_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HushMessage_SendIndividualMessage_{`,
		`SendIndividualMessage:` + strings.Replace(fmt.Sprintf("%v", this.SendIndividualMessage), "HushMessage_SendIndividualMessage", "HushMessage_SendIndividualMessage", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HushMessage_SendGroupMessage_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HushMessage_SendGroupMessage_{`,
		`SendGroupMessage:` + strings.Replace(fmt.Sprintf("%v", this.SendGroupMessage), "HushMessage_SendGroupMessage", "HushMessage_SendGroupMessage", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HushMessage_DHPubkeyAttestations) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForAttestations := "[]DHPubkeyAttestation{"
	for _, f := range this.Attestations {
		repeatedStringForAttestations += fmt.Sprintf("%v", f) + ","
	}
	repeatedStringForAttestations += "}"
	s := strings.Join([]string{`&HushMessage_DHPubkeyAttestations{`,
		`Attestations:` + repeatedStringForAttestations + `,`,
		`}`,
	}, "")
	return s
}
func (this *HushMessage_ProposeIndividualSession) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HushMessage_ProposeIndividualSession{`,
		`EncryptedProposal:` + fmt.Sprintf("%v", this.EncryptedProposal) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HushMessage_ApproveIndividualSession) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HushMessage_ApproveIndividualSession{`,
		`Approval:` + strings.Replace(fmt.Sprintf("%v", this.Approval), "IndividualSessionApproval", "pb1.IndividualSessionApproval", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HushMessage_SendIndividualMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HushMessage_SendIndividualMessage{`,
		`Message:` + strings.Replace(fmt.Sprintf("%v", this.Message), "IndividualMessage", "pb1.IndividualMessage", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HushMessage_SendGroupMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HushMessage_SendGroupMessage{`,
		`Message:` + strings.Replace(fmt.Sprintf("%v", this.Message), "GroupMessage", "pb1.GroupMessage", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringLibp2P(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *BlobMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLibp2P
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlobMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlobMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FetchManifest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLibp2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLibp2P
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLibp2P
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BlobMessage_FetchManifest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &BlobMessage_FetchManifest_{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendManifest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLibp2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLibp2P
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLibp2P
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BlobMessage_SendManifest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &BlobMessage_SendManifest_{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FetchChunk", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLibp2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLibp2P
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLibp2P
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BlobMessage_FetchChunk{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &BlobMessage_FetchChunk_{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendChunk", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLibp2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLibp2P
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLibp2P
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BlobMessage_SendChunk{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &BlobMessage_SendChunk_{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLibp2P(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLibp2P
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlobMessage_FetchManifest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLibp2P
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FetchManifest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FetchManifest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLibp2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLibp2P
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLibp2P
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Id == nil {
				m.Id = &pb.BlobID{}
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLibp2P(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLibp2P
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlobMessage_SendManifest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLibp2P
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SendManifest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SendManifest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Manifest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLibp2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLibp2P
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLibp2P
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Manifest == nil {
				m.Manifest = &pb.Manifest{}
			}
			if err := m.Manifest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exists", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLibp2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Exists = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipLibp2P(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLibp2P
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlobMessage_FetchChunk) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLibp2P
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FetchChunk: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FetchChunk: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sha3", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLibp2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLibp2P
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLibp2P
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sha3 = append(m.Sha3[:0], dAtA[iNdEx:postIndex]...)
			if m.Sha3 == nil {
				m.Sha3 = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLibp2P(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLibp2P
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlobMessage_SendChunk) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLibp2P
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SendChunk: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SendChunk: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chunk", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLibp2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLibp2P
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLibp2P
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chunk = append(m.Chunk[:0], dAtA[iNdEx:postIndex]...)
			if m.Chunk == nil {
				m.Chunk = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exists", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLibp2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Exists = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipLibp2P(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLibp2P
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HushMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLibp2P
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HushMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HushMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DhPubkeyAttestations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLibp2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLibp2P
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLibp2P
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &HushMessage_DHPubkeyAttestations{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &HushMessage_DhPubkeyAttestations{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposeIndividualSession", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLibp2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLibp2P
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLibp2P
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &HushMessage_ProposeIndividualSession{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &HushMessage_ProposeIndividualSession_{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApproveIndividualSession", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLibp2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLibp2P
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLibp2P
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &HushMessage_ApproveIndividualSession{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &HushMessage_ApproveIndividualSession_{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendIndividualMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLibp2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLibp2P
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLibp2P
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &HushMessage_SendIndividualMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &HushMessage_SendIndividualMessage_{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendGroupMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLibp2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLibp2P
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLibp2P
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &HushMessage_SendGroupMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &HushMessage_SendGroupMessage_{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLibp2P(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLibp2P
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HushMessage_DHPubkeyAttestations) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLibp2P
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DHPubkeyAttestations: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DHPubkeyAttestations: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attestations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLibp2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLibp2P
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLibp2P
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attestations = append(m.Attestations, pb1.DHPubkeyAttestation{})
			if err := m.Attestations[len(m.Attestations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLibp2P(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLibp2P
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HushMessage_ProposeIndividualSession) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLibp2P
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProposeIndividualSession: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProposeIndividualSession: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptedProposal", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLibp2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLibp2P
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLibp2P
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncryptedProposal = append(m.EncryptedProposal[:0], dAtA[iNdEx:postIndex]...)
			if m.EncryptedProposal == nil {
				m.EncryptedProposal = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLibp2P(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLibp2P
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HushMessage_ApproveIndividualSession) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLibp2P
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApproveIndividualSession: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApproveIndividualSession: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Approval", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLibp2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLibp2P
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLibp2P
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Approval == nil {
				m.Approval = &pb1.IndividualSessionApproval{}
			}
			if err := m.Approval.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLibp2P(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLibp2P
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HushMessage_SendIndividualMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLibp2P
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SendIndividualMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SendIndividualMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLibp2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLibp2P
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLibp2P
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Message == nil {
				m.Message = &pb1.IndividualMessage{}
			}
			if err := m.Message.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLibp2P(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLibp2P
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HushMessage_SendGroupMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLibp2P
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SendGroupMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SendGroupMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLibp2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLibp2P
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLibp2P
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Message == nil {
				m.Message = &pb1.GroupMessage{}
			}
			if err := m.Message.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLibp2P(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLibp2P
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLibp2P(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLibp2P
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLibp2P
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLibp2P
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLibp2P
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLibp2P
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLibp2P
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLibp2P        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLibp2P          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLibp2P = fmt.Errorf("proto: unexpected end of group")
)
